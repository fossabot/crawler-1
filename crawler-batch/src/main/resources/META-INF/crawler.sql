CREATE TABLE CRAWLER.SEQUENCE (
  SEQ_NAME VARCHAR(200),
  SEQ_COUNT  INTEGER,
  PRIMARY KEY (SEQ_NAME)
);

-- ********************** Tables for Crawler of Cobol file ******************** 
DROP table CRAWLER.VI_COBOL_FILE_REFERENCE;
DROP table CRAWLER.VI_COBOL_FILE_CODE_METRICS;
DROP table CRAWLER.VI_COBOL_FILE;
DROP table CRAWLER.VI_COBOL_CRAWLER_TRIGGER;

CREATE TABLE CRAWLER.VI_COBOL_CRAWLER_TRIGGER (
  ID INTEGER NOT NULL,
  TRIGGER_NAME VARCHAR(20) NOT NULL,
  DESCRIPTION VARCHAR(50) NOT NULL,
  PATH VARCHAR(200) NOT NULL, -- absolute path
  STATUS VARCHAR(20) NOT NULL, -- NOT STARTED, COMPLETE, IN PROGRESS
  PROCESSING_TIME INTEGER, 
  CREATED_BY VARCHAR(50) NOT NULL,
  CREATED_TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  UPDATED_BY VARCHAR(50),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);
ALTER TABLE CRAWLER.VI_COBOL_CRAWLER_TRIGGER ADD CONSTRAINT VI_COBOL_CRAWLER_TRIGGER_UK1 UNIQUE (TRIGGER_NAME);

CREATE TABLE CRAWLER.VI_COBOL_FILE (
  ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  PATH VARCHAR(200) NOT NULL, -- relative path
  DIGEST VARCHAR(32) NOT NULL,
  TRIGGER_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
);
ALTER TABLE CRAWLER.VI_COBOL_FILE ADD CONSTRAINT VI_COBOL_FILE_FK1 FOREIGN KEY (TRIGGER_ID)  REFERENCES CRAWLER.VI_COBOL_CRAWLER_TRIGGER(ID);

CREATE TABLE CRAWLER.VI_COBOL_FILE_CODE_METRICS (
  ID INTEGER NOT NULL,
  CF_ID INTEGER NOT NULL,
  LOC_ACTIVE INTEGER NOT NULL,
  LOC_COMMENT INTEGER NOT NULL,
  DESCRIPTION CLOB,
  TRIGGER_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
);
ALTER TABLE CRAWLER.VI_COBOL_FILE_CODE_METRICS ADD CONSTRAINT VI_COBOL_FILE_CODE_METRICS_FK1 FOREIGN KEY (TRIGGER_ID)  REFERENCES CRAWLER.VI_COBOL_CRAWLER_TRIGGER(ID);
ALTER TABLE CRAWLER.VI_COBOL_FILE_CODE_METRICS ADD CONSTRAINT VI_COBOL_FILE_CODE_METRICS_FK2 FOREIGN KEY (CF_ID)  REFERENCES CRAWLER.VI_COBOL_FILE(ID);

CREATE TABLE CRAWLER.VI_COBOL_FILE_REFERENCE (
  ID INTEGER NOT NULL,
  CF_ID INTEGER NOT NULL,
  REFERENCE_ITEM_NAME VARCHAR(70) NOT NULL,
  REFERENCE_ITEM_TYPE VARCHAR(30) NOT NULL, --COBOL file, table select, table delete, table update, table insert, procedure call, etc.
  TRIGGER_ID INTEGER NOT NULL,
  PRIMARY KEY (ID)
);

ALTER TABLE CRAWLER.VI_COBOL_FILE_REFERENCE ADD CONSTRAINT VI_COBOL_FILE_REFERENCE_FK1 FOREIGN KEY (TRIGGER_ID)  REFERENCES CRAWLER.VI_COBOL_CRAWLER_TRIGGER(ID);
ALTER TABLE CRAWLER.VI_COBOL_FILE_REFERENCE ADD CONSTRAINT VI_COBOL_FILE_REFERENCE_FK2 FOREIGN KEY (CF_ID)  REFERENCES CRAWLER.VI_COBOL_FILE(ID);


--************************ Tables for Crawler of database tables ****************************
CREATE TABLE CRAWLER.VI_DB_CRAWLER_DATABASES (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  PRODUCT_NAME VARCHAR(100),
  PRODUCT_VERSION VARCHAR(1000),
  DESCRIPTION CLOB,
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_SCHEMAS (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  DB_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION CLOB,
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_TABLES (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  SCHEMA_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION CLOB,
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_TABLES_HISTORY (
  RUNNING_FOR VARCHAR(10) NOT NULL,
  ID INTEGER NOT NULL,
  SCHEMA_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION CLOB,
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID, RUNNING_FOR)
);


CREATE TABLE CRAWLER.VI_DB_CRAWLER_COLUMNS (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  REMARKS CLOB,
  DATA_TYPE INTEGER,
  TYPE_NAME VARCHAR(100),
  COLUMN_SIZE INTEGER,
  NULLABLE VARCHAR(10),
  COLUMN_DEF VARCHAR(100),
  CHAR_OCTET_LENGTH INTEGER,
  ORDINAL_POSITION INTEGER,
  IS_AUTOINCREMENT VARCHAR(10),
  IS_GENERATEDCOLUMN  VARCHAR(10),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);


CREATE TABLE CRAWLER.VI_DB_CRAWLER_COLUMNS_HISTORY (
  RUNNING_FOR VARCHAR(10) NOT NULL,
  ID INTEGER NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  REMARKS CLOB,
  DATA_TYPE INTEGER,
  TYPE_NAME VARCHAR(100),
  COLUMN_SIZE INTEGER,
  NULLABLE VARCHAR(10),
  COLUMN_DEF VARCHAR(100),
  CHAR_OCTET_LENGTH INTEGER,
  ORDINAL_POSITION INTEGER,
  IS_AUTOINCREMENT VARCHAR(10),
  IS_GENERATEDCOLUMN  VARCHAR(10),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID, RUNNING_FOR)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_KEY (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  KEY_NAME VARCHAR(100) NOT NULL,
  KEY_TYPE VARCHAR(100),
  COLUMN_ID INTEGER,
  KEY_SEQ INTEGER,
  REFERENCING_COLUMN_ID INTEGER,
  UPDATE_RULE VARCHAR(50),
  DELETE_RULE VARCHAR(50),
  DEFERRABILITY VARCHAR(50),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_KEY_HISTORY (
  RUNNING_FOR VARCHAR(10) NOT NULL,
  ID INTEGER NOT NULL,
  KEY_NAME VARCHAR(100) NOT NULL,
  KEY_TYPE VARCHAR(100),
  COLUMN_ID INTEGER,
  KEY_SEQ INTEGER,
  REFERENCING_COLUMN_ID INTEGER,
  UPDATE_RULE VARCHAR(50),
  DELETE_RULE VARCHAR(50),
  DEFERRABILITY VARCHAR(50),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID, RUNNING_FOR)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_TYPE_INFO (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  DATA_TYPE INTEGER,
  TYPE_NAME VARCHAR(100),
  PRECISION  INTEGER,
  CREATE_PARAMS VARCHAR(100),
  NULLABLE VARCHAR(10),
  CASE_SENSITIVE  VARCHAR(10),
  SEARCHABLE VARCHAR(10),
  AUTO_INCREMENT VARCHAR(10),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_INDEX_INFO (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  NON_UNIQUE  VARCHAR(10),
  INDEX_QUALIFIER VARCHAR(100),
  INDEX_NAME VARCHAR(100),
  INDEX_TYPE VARCHAR(10),
  ORDINAL_POSITION INTEGER,
  COLUMN_ID INTEGER,
  ASC_OR_DESC VARCHAR(10),
  CARDINALITY  INTEGER,
  PAGES INTEGER,
  FILTER_CONDITION  VARCHAR(1000),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_INDEX_INFO_HISTORY (
  RUNNING_FOR VARCHAR(10) NOT NULL,
  ID INTEGER NOT NULL,
  TABLE_ID INTEGER NOT NULL,
  NON_UNIQUE  VARCHAR(10),
  INDEX_QUALIFIER VARCHAR(100),
  INDEX_NAME VARCHAR(100),
  INDEX_TYPE VARCHAR(10),
  ORDINAL_POSITION INTEGER,
  COLUMN_ID INTEGER,
  ASC_OR_DESC VARCHAR(10),
  CARDINALITY  INTEGER,
  PAGES INTEGER,
  FILTER_CONDITION  VARCHAR(1000),
  UPDATED_TS TIMESTAMP,
  PRIMARY KEY (ID, RUNNING_FOR)
);

CREATE TABLE CRAWLER.VI_DB_CRAWLER_CHANGE_LOG (
  ID INTEGER GENERATED ALWAYS AS IDENTITY NOT NULL,
  ITEM_ID INTEGER NOT NULL,
  ITEM_TYPE VARCHAR(20) NOT NULL,
  CHANGE VARCHAR(10) NOT NULL,
  RUNNING_FOR VARCHAR(10),
  CRAWLERER INTEGER NOT NULL,
  CRAWLER_START_TS TIMESTAMP NOT NULL,
  PRIMARY KEY (ID)
);

ALTER TABLE CRAWLER.VI_DB_CRAWLER_INDEX_INFO ADD CONSTRAINT VI_DB_CRAWLER_INDEX_INFO_FK1 FOREIGN KEY (COLUMN_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_COLUMNS(ID);
ALTER TABLE CRAWLER.VI_DB_CRAWLER_INDEX_INFO ADD CONSTRAINT VI_DB_CRAWLER_INDEX_INFO_FK2 FOREIGN KEY (TABLE_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_TABLES(ID);
ALTER TABLE CRAWLER.VI_DB_CRAWLER_KEY ADD CONSTRAINT VI_DB_CRAWLER_KEY_FK1 FOREIGN KEY (COLUMN_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_COLUMNS(ID);
ALTER TABLE CRAWLER.VI_DB_CRAWLER_COLUMNS ADD CONSTRAINT VI_DB_CRAWLER_COLUMNS_FK1 FOREIGN KEY (TABLE_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_TABLES(ID);
ALTER TABLE CRAWLER.VI_DB_CRAWLER_TABLES ADD CONSTRAINT VI_DB_CRAWLER_TABLES_FK1 FOREIGN KEY (SCHEMA_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_SCHEMAS(ID);
ALTER TABLE CRAWLER.VI_DB_CRAWLER_SCHEMAS ADD CONSTRAINT VI_DB_CRAWLER_SCHEMAS_FK1 FOREIGN KEY (DB_ID)  REFERENCES CRAWLER.VI_DB_CRAWLER_DATABASES(ID);


---- Batch metadata tables

DROP TABLE  BATCH.VI_STEP_EXECUTION_CONTEXT ;
DROP TABLE  BATCH.VI_JOB_EXECUTION_CONTEXT ;
DROP TABLE  BATCH.VI_STEP_EXECUTION ;
DROP TABLE  BATCH.VI_JOB_EXECUTION_PARAMS ;
DROP TABLE  BATCH.VI_JOB_EXECUTION ;
DROP TABLE  BATCH.VI_JOB_INSTANCE ;

DROP TABLE  BATCH.VI_STEP_EXECUTION_SEQ ;
DROP TABLE  BATCH.VI_JOB_EXECUTION_SEQ ;
DROP TABLE  BATCH.VI_JOB_SEQ ;

CREATE TABLE BATCH.VI_JOB_INSTANCE  (
  JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  VERSION BIGINT ,
  JOB_NAME VARCHAR(100) NOT NULL,
  JOB_KEY VARCHAR(32) NOT NULL,
  constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ;

CREATE TABLE BATCH.VI_JOB_EXECUTION  (
  JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  VERSION BIGINT  ,
  JOB_INSTANCE_ID BIGINT NOT NULL,
  CREATE_TIME TIMESTAMP NOT NULL,
  START_TIME TIMESTAMP DEFAULT NULL ,
  END_TIME TIMESTAMP DEFAULT NULL ,
  STATUS VARCHAR(10) ,
  EXIT_CODE VARCHAR(2500) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED TIMESTAMP,
  JOB_CONFIGURATION_LOCATION VARCHAR(2500) DEFAULT NULL,
  constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
  references BATCH.VI_JOB_INSTANCE(JOB_INSTANCE_ID)
) ;

CREATE TABLE BATCH.VI_JOB_EXECUTION_PARAMS  (
  JOB_EXECUTION_ID BIGINT NOT NULL ,
  TYPE_CD VARCHAR(6) NOT NULL ,
  KEY_NAME VARCHAR(100) NOT NULL ,
  STRING_VAL VARCHAR(250) ,
  DATE_VAL TIMESTAMP DEFAULT NULL ,
  LONG_VAL BIGINT ,
  DOUBLE_VAL DOUBLE PRECISION ,
  IDENTIFYING CHAR(1) NOT NULL ,
  constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
  references BATCH.VI_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH.VI_STEP_EXECUTION  (
  STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  VERSION BIGINT NOT NULL,
  STEP_NAME VARCHAR(100) NOT NULL,
  JOB_EXECUTION_ID BIGINT NOT NULL,
  START_TIME TIMESTAMP NOT NULL ,
  END_TIME TIMESTAMP DEFAULT NULL ,
  STATUS VARCHAR(10) ,
  COMMIT_COUNT BIGINT ,
  READ_COUNT BIGINT ,
  FILTER_COUNT BIGINT ,
  WRITE_COUNT BIGINT ,
  READ_SKIP_COUNT BIGINT ,
  WRITE_SKIP_COUNT BIGINT ,
  PROCESS_SKIP_COUNT BIGINT ,
  ROLLBACK_COUNT BIGINT ,
  EXIT_CODE VARCHAR(2500) ,
  EXIT_MESSAGE VARCHAR(2500) ,
  LAST_UPDATED TIMESTAMP,
  constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
  references BATCH.VI_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH.VI_STEP_EXECUTION_CONTEXT  (
  STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT CLOB ,
  constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
  references BATCH.VI_STEP_EXECUTION(STEP_EXECUTION_ID)
) ;

CREATE TABLE BATCH.VI_JOB_EXECUTION_CONTEXT  (
  JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
  SHORT_CONTEXT VARCHAR(2500) NOT NULL,
  SERIALIZED_CONTEXT CLOB ,
  constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
  references BATCH.VI_JOB_EXECUTION(JOB_EXECUTION_ID)
) ;

CREATE TABLE BATCH.VI_STEP_EXECUTION_SEQ (ID BIGINT  PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, DUMMY VARCHAR(1));
CREATE TABLE BATCH.VI_JOB_EXECUTION_SEQ (ID BIGINT  PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, DUMMY VARCHAR(1));
CREATE TABLE BATCH.VI_JOB_SEQ (ID BIGINT  PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, DUMMY VARCHAR(1));



